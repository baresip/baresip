name: Baresip Conan Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Baresip package version to publish'
        required: false
        type: string
      remote:
        description: 'Conan remote'
        required: true
        default: 'artifactory'
        type: choice
        options:
          - artifactory
          - conancenter
      configuration:
        description: 'Build configuration'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - minimal
          - professional-audio
          - video-focused

jobs:
  publish:
    strategy:
      fail-fast: false
      matrix:
        include:
          - profile: "linux-x64"
            os: ubuntu-latest
            arch: x86_64
          - profile: "macos-arm64"
            os: macos-latest
            arch: armv8
          - profile: "macos-x64"
            os: macos-latest
            arch: x86_64
          - profile: "windows-x64"
            os: windows-latest
            arch: x86_64

    runs-on: ${{ matrix.os }}
    name: "Publish ${{ matrix.profile }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install "conan>=2.0.0"

      - name: Configure Conan (Unix)
        if: runner.os != 'Windows'
        run: |
          conan profile detect --force
          mkdir -p ~/.conan2/profiles

          if [[ "${{ matrix.profile }}" == "macos-"* ]]; then
            cat > ~/.conan2/profiles/release << 'EOF'
          [settings]
          os=Macos
          arch=${{ matrix.arch }}
          compiler=apple-clang
          compiler.version=15
          compiler.libcxx=libc++
          build_type=Release
          [buildenv]
          CC=clang
          CXX=clang++
          EOF
          elif [[ "${{ matrix.profile }}" == "linux-"* ]]; then
            cat > ~/.conan2/profiles/release << 'EOF'
          [settings]
          os=Linux
          arch=${{ matrix.arch }}
          compiler=gcc
          compiler.version=11
          compiler.libcxx=libstdc++11
          build_type=Release
          EOF
          fi

      - name: Configure Conan (Windows)
        if: runner.os == 'Windows'
        run: |
          conan profile detect --force
          New-Item -ItemType Directory -Force -Path ~/.conan2/profiles
          echo "[settings]" > ~/.conan2/profiles/release
          echo "os=Windows" >> ~/.conan2/profiles/release
          echo "arch=${{ matrix.arch }}" >> ~/.conan2/profiles/release
          echo "compiler=msvc" >> ~/.conan2/profiles/release
          echo "compiler.version=193" >> ~/.conan2/profiles/release
          echo "compiler.runtime=dynamic" >> ~/.conan2/profiles/release
          echo "build_type=Release" >> ~/.conan2/profiles/release

      - name: Install system dependencies (Linux)
        if: startsWith(matrix.profile, 'linux-')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake pkg-config \
            libasound2-dev libpulse-dev libjack-dev \
            libgtk-3-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            portaudio19-dev

      - name: Install system dependencies (macOS)
        if: startsWith(matrix.profile, 'macos-')
        run: |
          brew install cmake pkg-config portaudio

      - name: Setup Conan remotes
        run: |
          conan remote add artifactory ${{ secrets.CONAN_REMOTE_URL }} --force
          conan remote add conancenter https://center.conan.io --force

      - name: Authenticate with Artifactory
        run: |
          conan remote login artifactory ${{ secrets.CONAN_USER }} -p ${{ secrets.CONAN_PASSWORD }}

      - name: Set configuration options (Unix)
        if: runner.os != 'Windows'
        run: |
          VERSION="${{ inputs.version || github.ref_name }}"
          CONFIG="${{ inputs.configuration }}"
          
          # Set base options
          BASE_OPTIONS=""
          
          case "$CONFIG" in
            "full")
              OPTIONS="-o baresip/*:with_opus=True -o baresip/*:with_g722=True -o baresip/*:with_g711=True -o baresip/*:with_av1=True -o baresip/*:with_openssl=True -o baresip/*:with_gstreamer=True -o baresip/*:with_sdl=True -o baresip/*:with_mosquitto=True -o baresip/*:with_png=True -o baresip/*:with_sndfile=True"
              ;;
            "minimal")
              OPTIONS="-o baresip/*:with_opus=True -o baresip/*:with_g722=True -o baresip/*:with_g711=True -o baresip/*:with_openssl=True"
              ;;
            "professional-audio")
              if [[ "${{ matrix.profile }}" == "linux-"* ]]; then
                OPTIONS="-o baresip/*:with_opus=True -o baresip/*:with_g722=True -o baresip/*:with_g711=True -o baresip/*:with_alsa=True -o baresip/*:with_pulseaudio=True -o baresip/*:with_pipewire=True -o baresip/*:with_jack=True -o baresip/*:with_portaudio=True -o baresip/*:with_gtk=True -o baresip/*:with_openssl=True -o baresip/*:with_sndfile=True"
              else
                OPTIONS="-o baresip/*:with_opus=True -o baresip/*:with_g722=True -o baresip/*:with_g711=True -o baresip/*:with_portaudio=True -o baresip/*:with_openssl=True -o baresip/*:with_sndfile=True"
              fi
              ;;
            "video-focused")
              OPTIONS="-o baresip/*:with_opus=True -o baresip/*:with_av1=True -o baresip/*:with_openssl=True -o baresip/*:with_gstreamer=True -o baresip/*:with_sdl=True -o baresip/*:with_png=True"
              ;;
          esac
          
          echo "CONAN_OPTIONS=$OPTIONS" >> $GITHUB_ENV

      - name: Set configuration options (Windows)
        if: runner.os == 'Windows'
        run: |
          $VERSION = "${{ inputs.version }}"
          if (-not $VERSION) { $VERSION = "${{ github.ref_name }}" }
          $CONFIG = "${{ inputs.configuration }}"
          
          switch ($CONFIG) {
            "full" {
              $OPTIONS = "-o baresip/*:with_opus=True -o baresip/*:with_g722=True -o baresip/*:with_g711=True -o baresip/*:with_av1=True -o baresip/*:with_openssl=True -o baresip/*:with_sdl=True -o baresip/*:with_mosquitto=True -o baresip/*:with_png=True -o baresip/*:with_sndfile=True"
            }
            "minimal" {
              $OPTIONS = "-o baresip/*:with_opus=True -o baresip/*:with_g722=True -o baresip/*:with_g711=True -o baresip/*:with_openssl=True"
            }
            "professional-audio" {
              $OPTIONS = "-o baresip/*:with_opus=True -o baresip/*:with_g722=True -o baresip/*:with_g711=True -o baresip/*:with_portaudio=True -o baresip/*:with_openssl=True -o baresip/*:with_sndfile=True"
            }
            "video-focused" {
              $OPTIONS = "-o baresip/*:with_opus=True -o baresip/*:with_av1=True -o baresip/*:with_openssl=True -o baresip/*:with_sdl=True -o baresip/*:with_png=True"
            }
          }
          
          echo "CONAN_OPTIONS=$OPTIONS" >> $env:GITHUB_ENV

      - name: Create and upload packages (Unix)
        if: runner.os != 'Windows'
        run: |
          VERSION="${{ inputs.version || github.ref_name }}"
          
          # Build dependencies first and upload missing ones
          echo "Building baresip dependencies and uploading missing packages..."
          conan install . --profile:build=release --profile:host=release --build=missing $CONAN_OPTIONS

          # Upload any newly built dependencies to artifactory
          echo "Uploading multimedia dependencies to Artifactory..."
          conan list "*:*" --format=compact | grep -v "baresip/" | while read pkg; do
            if [ ! -z "$pkg" ]; then
              echo "Uploading dependency: $pkg"
              conan upload "$pkg" -r ${{ inputs.remote }} -c || echo "Failed to upload $pkg, continuing..."
            fi
          done

          # Build main baresip package
          echo "Building baresip package with ${{ inputs.configuration }} configuration..."
          conan create . --name=baresip --version=${VERSION} \
            --profile:build=release --profile:host=release \
            --build=missing $CONAN_OPTIONS

          # Upload the baresip package
          echo "Uploading baresip package..."
          conan upload "baresip/${VERSION}@" -r ${{ inputs.remote }} -c

      - name: Create and upload packages (Windows)
        if: runner.os == 'Windows'
        run: |
          $VERSION = "${{ inputs.version }}"
          if (-not $VERSION) { $VERSION = "${{ github.ref_name }}" }
          
          # Build dependencies first and upload missing ones
          echo "Building baresip dependencies and uploading missing packages..."
          $cmd = "conan install . --profile:build=release --profile:host=release --build=missing " + $env:CONAN_OPTIONS
          Invoke-Expression $cmd

          # Upload any newly built dependencies to artifactory
          echo "Uploading multimedia dependencies to Artifactory..."
          $packages = conan list "*:*" --format=compact | Where-Object { $_ -notmatch "baresip/" }
          foreach ($pkg in $packages) {
            if ($pkg) {
              echo "Uploading dependency: $pkg"
              conan upload "$pkg" -r ${{ inputs.remote }} -c
              if ($LASTEXITCODE -ne 0) {
                echo "Failed to upload $pkg, continuing..."
              }
            }
          }

          # Build main baresip package
          echo "Building baresip package with ${{ inputs.configuration }} configuration..."
          $cmd = "conan create . --name=baresip --version=$VERSION --profile:build=release --profile:host=release --build=missing " + $env:CONAN_OPTIONS
          Invoke-Expression $cmd

          # Upload the baresip package
          echo "Uploading baresip package..."
          conan upload "baresip/$VERSION@" -r ${{ inputs.remote }} -c

      - name: Verify upload
        run: |
          VERSION="${{ inputs.version || github.ref_name }}"
          echo "Verifying baresip package upload..."
          conan list baresip/${VERSION}:* -r ${{ inputs.remote }}

      - name: Publish summary
        run: |
          VERSION="${{ inputs.version || github.ref_name }}"
          echo "## 📦 Baresip Package Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: baresip/${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ matrix.profile }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration**: ${{ inputs.configuration }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Remote**: ${{ inputs.remote }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Multimedia Dependencies Included" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ inputs.configuration }}" == "full" ]]; then
            echo "- 🎵 **Audio Codecs**: Opus, G.722, G.711" >> $GITHUB_STEP_SUMMARY
            echo "- 🎥 **Video Codecs**: AV1" >> $GITHUB_STEP_SUMMARY
            echo "- 🎬 **Multimedia**: GStreamer, SDL2" >> $GITHUB_STEP_SUMMARY
            echo "- 🔒 **Security**: OpenSSL" >> $GITHUB_STEP_SUMMARY
            echo "- 🌐 **IoT**: MQTT (Mosquitto)" >> $GITHUB_STEP_SUMMARY
            echo "- 📸 **Graphics**: PNG, libsndfile" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ inputs.configuration }}" == "professional-audio" ]]; then
            echo "- 🎵 **Audio Codecs**: Opus, G.722, G.711" >> $GITHUB_STEP_SUMMARY
            echo "- 🔊 **Audio Systems**: ALSA, PulseAudio, PipeWire, JACK, PortAudio" >> $GITHUB_STEP_SUMMARY
            echo "- 🎧 **Audio Processing**: libsndfile" >> $GITHUB_STEP_SUMMARY
            echo "- 🔒 **Security**: OpenSSL" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ inputs.configuration }}" == "video-focused" ]]; then
            echo "- 🎵 **Audio**: Opus codec" >> $GITHUB_STEP_SUMMARY
            echo "- 🎥 **Video**: AV1 codec" >> $GITHUB_STEP_SUMMARY
            echo "- 🎬 **Multimedia**: GStreamer, SDL2" >> $GITHUB_STEP_SUMMARY
            echo "- 📸 **Graphics**: PNG support" >> $GITHUB_STEP_SUMMARY
            echo "- 🔒 **Security**: OpenSSL" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🎵 **Audio Codecs**: Opus, G.722, G.711" >> $GITHUB_STEP_SUMMARY
            echo "- 🔒 **Security**: OpenSSL" >> $GITHUB_STEP_SUMMARY
          fi