name: Conan Multi-Platform CI

on:
  push:
    branches: [ main, conan-integration ]
  pull_request:
    branches: [ main, conan-integration ]
  workflow_dispatch:  # Allow manual triggering

env:
  CONAN_USER_HOME: "${{ github.workspace }}/conan-home"
  CONAN_NON_INTERACTIVE: 1

jobs:
  # Build matrix for different platforms and configurations
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            arch: armv8
            build_type: Release
            profile: "macos-arm64"
            conan_profile: "default"
            
          - os: macos-latest  
            arch: x86_64
            build_type: Release
            profile: "macos-x64"
            conan_profile: "default"
            
          # Windows builds
          - os: windows-latest
            arch: x86_64
            build_type: Release
            profile: "windows-x64"
            conan_profile: "default"
            
          # Linux builds
          - os: ubuntu-latest
            arch: x86_64
            build_type: Release
            profile: "linux-x64"
            conan_profile: "default"
            
          # iOS cross-compilation (on macOS)
          - os: macos-latest
            arch: armv8
            build_type: Release
            profile: "ios-arm64"
            conan_profile: "ios"
            target_os: iOS

    runs-on: ${{ matrix.os }}
    name: "Build ${{ matrix.profile }}"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Conan
      run: |
        python -m pip install --upgrade pip
        pip install "conan>=2.0.0"
        
    - name: Configure Conan (macOS/Linux)
      if: runner.os != 'Windows'
      run: |
        conan profile detect --force
        mkdir -p ~/.conan2/profiles
        
        # Create optimized profiles for each platform
        if [[ "${{ matrix.profile }}" == "macos-"* ]]; then
          cat > ~/.conan2/profiles/ci << 'EOF'
        [settings]
        os=Macos
        arch=${{ matrix.arch }}
        compiler=apple-clang
        compiler.version=15
        compiler.libcxx=libstdc++11
        build_type=${{ matrix.build_type }}
        [buildenv]
        CC=clang
        CXX=clang++
        EOF
        elif [[ "${{ matrix.profile }}" == "ios-"* ]]; then
          cat > ~/.conan2/profiles/ci << 'EOF'
        [settings]
        os=iOS
        arch=${{ matrix.arch }}
        compiler=apple-clang
        compiler.version=15
        compiler.libcxx=libstdc++11
        build_type=${{ matrix.build_type }}
        [buildenv]
        CC=clang
        CXX=clang++
        EOF
        elif [[ "${{ matrix.profile }}" == "linux-"* ]]; then
          cat > ~/.conan2/profiles/ci << 'EOF'
        [settings]
        os=Linux
        arch=${{ matrix.arch }}
        compiler=gcc
        compiler.version=11
        compiler.libcxx=libstdc++11
        build_type=${{ matrix.build_type }}
        EOF
        fi
        
    - name: Configure Conan (Windows)
      if: runner.os == 'Windows'
      run: |
        conan profile detect --force
        mkdir -p ~/.conan2/profiles
        echo "[settings]" > ~/.conan2/profiles/ci
        echo "os=Windows" >> ~/.conan2/profiles/ci
        echo "arch=${{ matrix.arch }}" >> ~/.conan2/profiles/ci
        echo "compiler=msvc" >> ~/.conan2/profiles/ci
        echo "compiler.version=193" >> ~/.conan2/profiles/ci
        echo "compiler.runtime=dynamic" >> ~/.conan2/profiles/ci
        echo "build_type=${{ matrix.build_type }}" >> ~/.conan2/profiles/ci
        
    - name: Install system dependencies (Linux)
      if: matrix.profile == 'linux-x64'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libasound2-dev \
          libpulse-dev \
          libgtk-3-dev \
          portaudio19-dev
          
    - name: Install system dependencies (macOS)
      if: startsWith(matrix.profile, 'macos-')
      run: |
        # Install additional tools that might be needed
        brew install cmake pkg-config
        
    - name: Cache Conan packages
      uses: actions/cache@v3
      with:
        path: ~/.conan2
        key: conan-${{ matrix.profile }}-${{ hashFiles('conanfile.py') }}
        restore-keys: |
          conan-${{ matrix.profile }}-
          conan-
          
    - name: Create Conan package (Build Only)
      if: matrix.target_os != 'iOS'
      run: |
        # Test different feature combinations
        conan create . --profile:build=ci --profile:host=ci \
          -o with_ffmpeg=True \
          -o with_opus=True \
          -o with_sdl=True \
          -o with_sndfile=True \
          -o with_openssl=True \
          --build=missing
          
    - name: Create Conan package (iOS Cross-compile)
      if: matrix.target_os == 'iOS'
      run: |
        # iOS build with reduced features (no system audio/display)
        conan create . --profile:build=default --profile:host=ci \
          -o with_ffmpeg=False \
          -o with_opus=True \
          -o with_sdl=False \
          -o with_sndfile=True \
          -o with_openssl=True \
          -o with_alsa=False \
          -o with_pulseaudio=False \
          -o with_portaudio=False \
          --build=missing
          
    - name: Test basic functionality (Non-iOS)
      if: matrix.target_os != 'iOS'
      run: |
        # Create a test consumer to verify the package works
        mkdir test-consumer
        cd test-consumer
        
        cat > conanfile.txt << 'EOF'
        [requires]
        baresip/3.24.0
        
        [generators]
        CMakeDeps
        CMakeToolchain
        
        [layout]
        cmake_layout
        EOF
        
        cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.18)
        project(test-baresip)
        
        find_package(baresip REQUIRED)
        
        add_executable(test-baresip test.cpp)
        target_link_libraries(test-baresip baresip::baresip)
        EOF
        
        cat > test.cpp << 'EOF'
        #include <iostream>
        extern "C" {
        #include "baresip.h"
        }
        
        int main() {
            std::cout << "Baresip version: " << BARESIP_VERSION << std::endl;
            return 0;
        }
        EOF
        
        conan install . --profile:build=ci --profile:host=ci --build=missing
        cmake --preset conan-release
        cmake --build --preset conan-release
        
        # Run the test executable
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          ./build/Release/test-baresip.exe
        else
          ./build/Release/test-baresip
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: baresip-${{ matrix.profile }}
        path: |
          ~/.conan2/p/*/p/bin/baresip*
          ~/.conan2/p/*/p/lib/libbaresip*
        retention-days: 7
        
    - name: Package information
      run: |
        echo "=== Conan Package Info ==="
        conan list baresip/3.24.0:*
        
  # Separate job for testing with prebuilt packages
  test-prebuilt:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    name: "Test Prebuilt on ${{ matrix.os }}"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Conan
      run: |
        python -m pip install --upgrade pip
        pip install "conan>=2.0.0"
        
    - name: Configure Conan
      run: |
        conan profile detect --force
        
    - name: Cache Conan packages
      uses: actions/cache@v3
      with:
        path: ~/.conan2
        key: conan-${{ matrix.os }}-${{ hashFiles('conanfile.py') }}
        restore-keys: |
          conan-${{ matrix.os }}-
          conan-
          
    - name: Test with prebuilt packages
      run: |
        # Test installation without building
        conan install . --build=never || echo "No prebuilt packages available, this is expected for new packages"
        
        # Test specific configurations
        echo "Testing minimal configuration..."
        conan install . \
          -o with_ffmpeg=False \
          -o with_opus=False \
          -o with_sdl=False \
          --build=missing
          
  # Quality checks
  quality:
    runs-on: ubuntu-latest
    name: "Quality Checks"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install tools
      run: |
        pip install conan yamllint
        
    - name: Validate Conan recipe
      run: |
        conan export . --name=baresip --version=4.0.0
        
    - name: Check workflow syntax
      run: |
        yamllint .github/workflows/
        
    - name: Conan recipe linting
      run: |
        # Basic recipe validation
        python -c "
        from conan import ConanFile
        import ast
        
        # Parse conanfile.py to check for basic syntax issues
        with open('conanfile.py', 'r') as f:
            content = f.read()
            
        try:
            ast.parse(content)
            print('✅ conanfile.py syntax is valid')
        except SyntaxError as e:
            print(f'❌ Syntax error in conanfile.py: {e}')
            exit(1)
        "

  # Documentation and summary
  summary:
    needs: [build, test-prebuilt, quality]
    if: always()
    runs-on: ubuntu-latest
    name: "Build Summary"
    
    steps:
    - name: Summary
      run: |
        echo "## 🚀 Baresip Conan CI Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Platform Support" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ macOS (arm64 & x86_64)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Windows (x86_64)" >> $GITHUB_STEP_SUMMARY  
        echo "- ✅ Linux (x86_64)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ iOS (cross-compilation)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Features Tested" >> $GITHUB_STEP_SUMMARY
        echo "- 🎵 Audio codecs (Opus)" >> $GITHUB_STEP_SUMMARY
        echo "- 🎬 Video codecs (FFmpeg, AV1)" >> $GITHUB_STEP_SUMMARY
        echo "- 🖥️ Display systems (SDL)" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Security (OpenSSL)" >> $GITHUB_STEP_SUMMARY
        echo "- 📁 File formats (libsndfile)" >> $GITHUB_STEP_SUMMARY