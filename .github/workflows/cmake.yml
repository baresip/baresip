name: Cmake

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
    - stable

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - name: openssl path macos
      if: ${{ runner.os == 'macOS' }}
      run: |
        echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl" >> $GITHUB_ENV

    - name: install packages
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt-get update && sudo apt-get install -y \
                            libssl-dev \
                            libasound2-dev \
                            libcodec2-dev \
                            libfdk-aac-dev \
                            libopencore-amrnb-dev \
                            libopencore-amrwb-dev \
                            libopus-dev \
                            libpulse-dev \
                            libx11-dev \
                            libavcodec-dev \
                            libavdevice-dev \
                            libavformat-dev \
                            libglib2.0-dev

    - name: install packages
      if: ${{ runner.os == 'macOS' }}
      run: |
        brew install codec2 \
                        fdk-aac \
                        ffmpeg \
                        jack \
                        mpg123 \
                        spandsp \
                        glib-utils

    - uses: sreimers/pr-dependency-action@v0.5
      with:
        name: re
        repo: https://github.com/baresip/re
        secret: ${{ secrets.GITHUB_TOKEN }}

    - uses: sreimers/pr-dependency-action@v0.5
      with:
        name: rem
        repo: https://github.com/baresip/rem
        secret: ${{ secrets.GITHUB_TOKEN }}

    - name: make re/rem
      run: |
        for p in re rem; do
          cmake -S $p -B $p/build
          cmake --build $p/build -j
        done
        for p in re rem; do
          mv $p ../.
        done

    - name: ldconfig
      if: ${{ runner.os == 'Linux' }}
      run: sudo ldconfig

    - name: baresip
      run: |
        cmake -B build -DCMAKE_C_FLAGS="-Werror" && cmake --build build -j
 
    - name: baresip static
      run: |
        rm -Rf build
        cmake -B build -DSTATIC=1 -DCMAKE_C_FLAGS="-Werror" && cmake --build build -j
